<?xml version="1.0" encoding="UTF-8"?>
<!-- Application context definition for PetClinic on JPA. -->
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util"
	xmlns="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">


	<!-- 缓存管理器 -->
	<bean id="shiroCacheManager"
		class="org.apache.shiro.cache.spring.SpringCacheManagerWrapper">
		<property name="cacheManager" ref="springCacheManager" />
	</bean>

	<!-- 凭证匹配器 -->
	<bean id="credentialsMatcher"
		class="me.supercube.security.credentials.RetryLimitHashedCredentialsMatcher">
		<constructor-arg ref="shiroCacheManager" />
		<property name="hashAlgorithmName" value="md5" />
		<property name="hashIterations" value="2" />
		<property name="storedCredentialsHexEncoded" value="true" />
	</bean>

	<!-- Realm实现 -->
	<bean id="shiroDbRealm"
		class="me.supercube.security.realm.ShiroDbRealm">
		<property name="credentialsMatcher" ref="credentialsMatcher" />
        <property name="cachingEnabled" value="true" />
        <property name="authenticationCachingEnabled" value="true"/>
        <property name="authenticationCacheName" value="authenticationCache"/>
        <property name="authorizationCachingEnabled" value="true"/>
        <property name="authorizationCacheName" value="authorizationCache"/>
	</bean>


	<!-- 会话ID生成器,配置Session ID生成策略 -->
	<bean id="sessionIdGenerator"
		class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />

	<!-- 会话Cookie模板 -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		 <constructor-arg value="${shiro.uid.cookie.name}"/>
<!--         <property name="domain" value="${shiro.uid.cookie.domain}"/>
        <property name="path" value="${shiro.uid.cookie.path}"/> -->
        <property name="httpOnly" value="${shiro.uid.cookie.httpOnly}"/>
        <property name="maxAge" value="${shiro.uid.cookie.maxAge}"/>
	</bean>

	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="${shiro.uid.rememeberMe.cookie.name}"/>
<!--         <property name="domain" value="${shiro.uid.cookie.domain}"/>
        <property name="path" value="${shiro.uid.cookie.path}"/> -->
        <property name="httpOnly" value="${shiro.uid.cookie.httpOnly}"/>
        <property name="maxAge" value="${shiro.uid.rememeberMe.cookie.maxAge}"/>
	</bean>

	<!-- rememberMe管理器 -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位） -->
		<property name="cipherKey"
			value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}" />
		<property name="cookie" ref="rememberMeCookie" />
	</bean>


	<!-- 会话DAO -->
	<bean id="sessionDAO"
		class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
		<property name="activeSessionsCacheName" value="shiro-activeSessionCache" />
		<property name="sessionIdGenerator" ref="sessionIdGenerator" />
	</bean>


 	<!-- 会话验证调度器  in milliseconds -->
	<bean id="sessionValidationScheduler"
		class="org.apache.shiro.session.mgt.scheduler.SpringSessionValidationScheduler">
		<property name="sessionValidationInterval" value="86400000" />
		<property name="sessionManager" ref="sessionManager" />
		<property name="scheduler" ref="taskScheduler"/>
	</bean>



	<bean id="appSessionListener" class="me.supercube.security.listener.AppSessionListener"></bean>
	<!-- 会话管理器 -->
	<bean id="sessionManager"
		class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<property name="globalSessionTimeout" value="86400000" />
		<property name="deleteInvalidSessions" value="true" />
		<property name="sessionDAO" ref="sessionDAO" />

		<property name="sessionValidationInterval" value="86400000"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>

		<property name="cacheManager" ref="shiroCacheManager"/>
		<property name="sessionIdCookieEnabled" value="true" />
		<property name="sessionIdCookie" ref="sessionIdCookie" />

		<property name ="sessionListeners">
			<list>
				<ref bean="appSessionListener" />
			</list>
		</property>

	</bean>

	<bean id="authenticationListenerLogger" class="me.supercube.security.listener.AuthenticationListenerLogger"></bean>

	<bean id="modularRealmAuthenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
	    <property name="authenticationListeners">
	    	<list>
	    		<ref bean="authenticationListenerLogger" />
	    	</list>
	    </property>
	     <property name="realms">
	    	<list>
	    		<ref bean="shiroDbRealm" />
	    	</list>
	    </property>
	 </bean>

	<!-- 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- 必须填写realm，否则不执行doGetAuthorizationInfo 权限验证 -->
		<property name="realm" ref="shiroDbRealm" />
		<property name="sessionManager" ref="sessionManager"/>
		<property name="rememberMeManager" ref="rememberMeManager" />
		<property name="authenticator" ref="modularRealmAuthenticator" />
	</bean>

	<!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod"
			value="org.apache.shiro.SecurityUtils.setSecurityManager" />
		<property name="arguments" ref="securityManager" />
	</bean>

	<!-- 基于Form表单的身份验证过滤器 -->
	<bean id="formAuthenticationFilter"
		class="org.apache.shiro.web.filter.authc.BaseFormAuthenticationFilter">
		<property name="usernameParam" value="username" />
		<property name="passwordParam" value="pwd" />
		<property name="rememberMeParam" value="rememberMe" />
		<property name="loginUrl" value="/login" />
		<property name="successUrl" value="/#/mctrl" />
	</bean>


<!-- 	<bean id="sysUserFilter"
		class="com.ibms.intebase.portal.security.web.filter.SysUserFilter" />
 -->

	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="successUrl" value="/#/mctrl" />
		<property name="loginUrl" value="/login.html" />
		<property name="unauthorizedUrl" value="/WEB-INF/401.jsp" />
		<property name="filters">
			<util:map>
				<entry key="authc" value-ref="formAuthenticationFilter" />
				<!-- <entry key="sysUser" value-ref="sysUserFilter" /> -->
			</util:map>
		</property>
		  <property name="filterChainDefinitions">
            <value>
				/styles/** = anon
				/scripts/** = anon
				/assets/** = anon
				/excels/** = anon
				/doclinks/** = anon
                /login = authc
                /login/** = anon
                /logout = logout
                /authenticated = anon
                /oauth2/authorize=anon
                /oauth2/accessToken=anon
                /oauth2/tokeninfo=anon
                /api/* = anon
                /** = authc
            </value>
        </property>

	</bean>

	<!-- Shiro生命周期处理器 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod"
			value="org.apache.shiro.SecurityUtils.setSecurityManager" />
		<property name="arguments" ref="securityManager" />
	</bean>
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>


</beans>
